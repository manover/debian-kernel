commit 960ce81bdbd46bc7faaeb2f9fcddfea1e48ee388 (HEAD -> bcache-updates-linux-block-for-4.13, wheeler/bcache-updates-linux-block-for-4.13)
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 28 14:48:18 2017 +0300

    bcache: Update continue_at() documentation

    continue_at() doesn't have a return statement anymore.

    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>

commit 6eb61281eff9434492a9e3278283fe250ac085f4
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 28 14:47:07 2017 +0300

    bcache: silence static checker warning

    In olden times, closure_return() used to have a hidden return built in.
    We removed the hidden return but forgot to add a new return here.  If
    "c" were NULL we would oops on the next line, but fortunately "c" is
    never NULL.  Let's just remove the if statement.

    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
--- a/drivers/md/bcache/closure.h
+++ b/drivers/md/bcache/closure.h
@@ -312,8 +312,6 @@ static inline void closure_wake_up(struc
  * been dropped with closure_put()), it will resume execution at @fn running out
  * of @wq (or, if @wq is NULL, @fn will be called by closure_put() directly).
  *
- * NOTE: This macro expands to a return in the calling function!
- *
  * This is because after calling continue_at() you no longer have a ref on @cl,
  * and whatever @cl owns may be freed out from under you - a running closure fn
  * has a ref on its own closure which continue_at() drops.
@@ -340,8 +338,6 @@ do {									\
  * Causes @fn to be executed out of @cl, in @wq context (or called directly if
  * @wq is NULL).
  *
- * NOTE: like continue_at(), this macro expands to a return in the caller!
- *
  * The ref the caller of continue_at_nobarrier() had on @cl is now owned by @fn,
  * thus it's not safe to touch anything protected by @cl after a
  * continue_at_nobarrier().
--- a/drivers/md/bcache/super.c
+++ b/drivers/md/bcache/super.c
@@ -1381,9 +1381,6 @@ static void cache_set_flush(struct closu
 	struct btree *b;
 	unsigned i;
 
-	if (!c)
-		closure_return(cl);
-
 	bch_cache_accounting_destroy(&c->accounting);
 
 	kobject_put(&c->internal);

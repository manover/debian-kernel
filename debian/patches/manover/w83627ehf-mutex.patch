--- a/drivers/hwmon/w83627ehf.c
+++ b/drivers/hwmon/w83627ehf.c
@@ -114,6 +114,12 @@ MODULE_PARM_DESC(fan_debounce, "Enable d
 #define SIO_NCT6776_ID		0xc330
 #define SIO_ID_MASK		0xFFF0
 
+#ifdef CONFIG_ACPI_MUTEX
+#define W83627EHF_MUTEX_PATH "\\_SB.PCI0.SBRG.MUT0"
+
+static acpi_handle w83627ehf_acpi_sio_mutex;
+#endif
+
 static inline void
 superio_outb(int ioreg, int reg, int val)
 {
@@ -138,6 +144,17 @@ superio_select(int ioreg, int ld)
 static inline int
 superio_enter(int ioreg)
 {
+#ifdef CONFIG_ACPI_MUTEX
+	if (w83627ehf_acpi_sio_mutex) {
+		acpi_status status;
+
+		status = acpi_acquire_mutex(w83627ehf_acpi_sio_mutex, NULL, 0x10);
+		if (ACPI_FAILURE(status)) {
+			pr_err("Failed to acquire ACPI mutex\n");
+			return -EBUSY;
+		}
+	}
+#endif
 	if (!request_muxed_region(ioreg, 2, DRVNAME))
 		return -EBUSY;
 
@@ -154,6 +171,10 @@ superio_exit(int ioreg)
 	outb(0x02, ioreg);
 	outb(0x02, ioreg + 1);
 	release_region(ioreg, 2);
+#ifdef CONFIG_ACPI_MUTEX
+	if (w83627ehf_acpi_sio_mutex)
+		 acpi_release_mutex(w83627ehf_acpi_sio_mutex, NULL);
+#endif
 }
 
 /*
@@ -2816,6 +2837,17 @@ static int __init sensors_w83627ehf_init
 	unsigned short address;
 	struct resource res;
 	struct w83627ehf_sio_data sio_data;
+#ifdef CONFIG_ACPI_MUTEX
+	acpi_status status;
+
+	status = acpi_get_handle(NULL, W83627EHF_MUTEX_PATH, &w83627ehf_acpi_sio_mutex);
+	if (ACPI_SUCCESS(status)) {
+		pr_debug("Found ACPI SIO mutex %s\n", W83627EHF_MUTEX_PATH);
+	} else {
+		w83627ehf_acpi_sio_mutex = NULL;
+		pr_warn("ACPI SIO mutex %s not found\n", W83627EHF_MUTEX_PATH);
+	}
+#endif
 
 	/*
 	 * initialize sio_data->kind and sio_data->sioreg.
